119,146c119,213
< `-FunctionDecl 0x400000d23d50 </app/compiler/tests/parser/test_simple.c:1:1, col:21> col:5 used add 'int (int, int)'
< | |-ParmVarDecl 0x0000400000a1cfc0 <col:9, col:13> col:13 a 'int'
<   `-ParmVarDecl 0x0000400000a1d010 <col:9, col:13> col:13 b 'int'
< `-FunctionDecl 0x400000d23f88 prev 0x400000d23d50 <line:3:1, line:5:1> line:3:5 used add 'int (int, int)'
<   `-CompoundStmt 0x400000d24000 <col:12, line:6:1>
<     `-ReturnStmt 0x400000d23ff0 <line:5:5, col:12>
<       `-BinaryOperator 0x0000400000a1bf20 <col:18, col:22> 'int' '+'
<       | |-DeclRefExpr 0x0000400000a1be60 <col:18> 'int' lvalue Var 0x400000d23d38 'a' 'int'
<         `-DeclRefExpr 0x0000400000a1bec0 <col:18> 'int' lvalue Var 0x400000d23d38 'b' 'int'
< `-FunctionDecl 0x400000d23f88 prev 0x400000d23d50 <line:3:1, line:5:1> line:3:5 used main 'int ()'
<   `-CompoundStmt 0x400000d24000 <col:12, line:6:1>
<   | |-DeclStmt 0x400000d23dc0 <line:2:5, col:15>
<   |   `-VarDecl 0x0000400000a1c380 <col:5, col:13> col:9 used x 'int' cinit
<   |     `-IntegerLiteral 0x0000400000a1c1d0 <col:13> 'int' 10
<   | |-DeclStmt 0x400000d23e78 <line:3:5, col:15>
<   |   `-VarDecl 0x0000400000a1e060 <col:5, col:13> col:9 used y 'int' cinit
<   |     `-IntegerLiteral 0x0000400000a1c420 <col:13> 'int' 5
<   | |-DeclStmt 0x0000400000a1ffe0 <line:10:5, col:13>
<   | | |-VarDecl 0x0000400000a1f460 <col:5, col:13> col:9 used i 'int'
<   |   `-VarDecl 0x0000400000a1f4b0 <col:5, col:13> col:9 used j 'int'
<   | |-DeclStmt 0x400000d23fa0 <line:4:5, col:23>
<   |   `-VarDecl 0x0000400000a1d880 <col:5, col:22> col:9 used result 'int' cinit
<   |     `-IntegerLiteral 0x0000400000a1d820 <col:13> 'int' 0
<   | |-IfStmt 0x0000400000a20080 <line:13:5, line:17:5> has_else
<   | |-WhileStmt 0x0000400000a200d0 <line:19:5, line:22:5>
<   | |-ForStmt 0x0000400000a20120 <line:24:5, line:26:5>
<     `-ReturnStmt 0x400000d23ff0 <line:5:5, col:12>
<       `-DeclRefExpr 0x0000400000a21060 <col:12> 'int' lvalue Var 0x400000d23ea8 'result' 'int'
---
> |-FunctionDecl 0x400000d23d50 </app/compiler/tests/parser/test_simple.c:1:1, col:21> col:5 used add 'int (int, int)'
> | |-ParmVarDecl 0x400000d23bf8 <col:9, col:13> col:13 a 'int'
> | `-ParmVarDecl 0x400000d23c78 <col:16, col:20> col:20 b 'int'
> |-FunctionDecl 0x400000d23f88 prev 0x400000d23d50 <line:3:1, line:5:1> line:3:5 used add 'int (int, int)'
> | |-ParmVarDecl 0x400000d23e68 <col:9, col:13> col:13 used a 'int'
> | |-ParmVarDecl 0x400000d23ee8 <col:16, col:20> col:20 used b 'int'
> | `-CompoundStmt 0x400000d3ab68 <col:23, line:5:1>
> |   `-ReturnStmt 0x400000d3ab58 <line:4:5, col:16>
> |     `-BinaryOperator 0x400000d3ab38 <col:12, col:16> 'int' '+'
> |       |-ImplicitCastExpr 0x400000d24080 <col:12> 'int' <LValueToRValue>
> |       | `-DeclRefExpr 0x400000d24040 <col:12> 'int' lvalue ParmVar 0x400000d23e68 'a' 'int'
> |       `-ImplicitCastExpr 0x400000d3ab20 <col:16> 'int' <LValueToRValue>
> |         `-DeclRefExpr 0x400000d24060 <col:16> 'int' lvalue ParmVar 0x400000d23ee8 'b' 'int'
> `-FunctionDecl 0x400000d3abd0 <line:7:1, line:29:1> line:7:5 main 'int ()'
>   `-CompoundStmt 0x400000d3b7f8 <col:12, line:29:1>
>     |-DeclStmt 0x400000d3ad18 <line:8:5, col:15>
>     | `-VarDecl 0x400000d3ac90 <col:5, col:13> col:9 used x 'int' cinit
>     |   `-IntegerLiteral 0x400000d3acf8 <col:13> 'int' 10
>     |-DeclStmt 0x400000d3add0 <line:9:5, col:14>
>     | `-VarDecl 0x400000d3ad48 <col:5, col:13> col:9 used y 'int' cinit
>     |   `-IntegerLiteral 0x400000d3adb0 <col:13> 'int' 5
>     |-DeclStmt 0x400000d3af00 <line:10:5, col:13>
>     | |-VarDecl 0x400000d3ae00 <col:5, col:9> col:9 used i 'int'
>     | `-VarDecl 0x400000d3ae80 <col:5, col:12> col:12 j 'int'
>     |-DeclStmt 0x400000d3afb8 <line:11:5, col:19>
>     | `-VarDecl 0x400000d3af30 <col:5, col:18> col:9 used result 'int' cinit
>     |   `-IntegerLiteral 0x400000d3af98 <col:18> 'int' 0
>     |-IfStmt 0x400000d3b2a8 <line:13:5, line:17:5> has_else
>     | |-BinaryOperator 0x400000d3b040 <line:13:9, col:13> 'int' '>'
>     | | |-ImplicitCastExpr 0x400000d3b010 <col:9> 'int' <LValueToRValue>
>     | | | `-DeclRefExpr 0x400000d3afd0 <col:9> 'int' lvalue Var 0x400000d3ac90 'x' 'int'
>     | | `-ImplicitCastExpr 0x400000d3b028 <col:13> 'int' <LValueToRValue>
>     | |   `-DeclRefExpr 0x400000d3aff0 <col:13> 'int' lvalue Var 0x400000d3ad48 'y' 'int'
>     | |-CompoundStmt 0x400000d3b1a8 <col:16, line:15:5>
>     | | `-BinaryOperator 0x400000d3b188 <line:14:9, col:26> 'int' '='
>     | |   |-DeclRefExpr 0x400000d3b060 <col:9> 'int' lvalue Var 0x400000d3af30 'result' 'int'
>     | |   `-CallExpr 0x400000d3b120 <col:18, col:26> 'int'
>     | |     |-ImplicitCastExpr 0x400000d3b108 <col:18> 'int (*)(int, int)' <FunctionToPointerDecay>
>     | |     | `-DeclRefExpr 0x400000d3b080 <col:18> 'int (int, int)' Function 0x400000d23f88 'add' 'int (int, int)'
>     | |     |-ImplicitCastExpr 0x400000d3b158 <col:22> 'int' <LValueToRValue>
>     | |     | `-DeclRefExpr 0x400000d3b0a0 <col:22> 'int' lvalue Var 0x400000d3ac90 'x' 'int'
>     | |     `-ImplicitCastExpr 0x400000d3b170 <col:25> 'int' <LValueToRValue>
>     | |       `-DeclRefExpr 0x400000d3b0c0 <col:25> 'int' lvalue Var 0x400000d3ad48 'y' 'int'
>     | `-CompoundStmt 0x400000d3b290 <line:15:12, line:17:5>
>     |   `-BinaryOperator 0x400000d3b270 <line:16:9, col:22> 'int' '='
>     |     |-DeclRefExpr 0x400000d3b1c0 <col:9> 'int' lvalue Var 0x400000d3af30 'result' 'int'
>     |     `-BinaryOperator 0x400000d3b250 <col:18, col:22> 'int' '-'
>     |       |-ImplicitCastExpr 0x400000d3b220 <col:18> 'int' <LValueToRValue>
>     |       | `-DeclRefExpr 0x400000d3b1e0 <col:18> 'int' lvalue Var 0x400000d3ac90 'x' 'int'
>     |       `-ImplicitCastExpr 0x400000d3b238 <col:22> 'int' <LValueToRValue>
>     |         `-DeclRefExpr 0x400000d3b200 <col:22> 'int' lvalue Var 0x400000d3ad48 'y' 'int'
>     |-WhileStmt 0x400000d3b4e0 <line:19:5, line:22:5>
>     | |-BinaryOperator 0x400000d3b330 <line:19:12, col:16> 'int' '>'
>     | | |-ImplicitCastExpr 0x400000d3b318 <col:12> 'int' <LValueToRValue>
>     | | | `-DeclRefExpr 0x400000d3b2d8 <col:12> 'int' lvalue Var 0x400000d3ac90 'x' 'int'
>     | | `-IntegerLiteral 0x400000d3b2f8 <col:16> 'int' 0
>     | `-CompoundStmt 0x400000d3b4c0 <col:19, line:22:5>
>     |   |-BinaryOperator 0x400000d3b3e8 <line:20:9, col:17> 'int' '='
>     |   | |-DeclRefExpr 0x400000d3b350 <col:9> 'int' lvalue Var 0x400000d3ac90 'x' 'int'
>     |   | `-BinaryOperator 0x400000d3b3c8 <col:13, col:17> 'int' '-'
>     |   |   |-ImplicitCastExpr 0x400000d3b3b0 <col:13> 'int' <LValueToRValue>
>     |   |   | `-DeclRefExpr 0x400000d3b370 <col:13> 'int' lvalue Var 0x400000d3ac90 'x' 'int'
>     |   |   `-IntegerLiteral 0x400000d3b390 <col:17> 'int' 1
>     |   `-BinaryOperator 0x400000d3b4a0 <line:21:9, col:27> 'int' '='
>     |     |-DeclRefExpr 0x400000d3b408 <col:9> 'int' lvalue Var 0x400000d3af30 'result' 'int'
>     |     `-BinaryOperator 0x400000d3b480 <col:18, col:27> 'int' '+'
>     |       |-ImplicitCastExpr 0x400000d3b468 <col:18> 'int' <LValueToRValue>
>     |       | `-DeclRefExpr 0x400000d3b428 <col:18> 'int' lvalue Var 0x400000d3af30 'result' 'int'
>     |       `-IntegerLiteral 0x400000d3b448 <col:27> 'int' 1
>     |-ForStmt 0x400000d3b778 <line:24:5, line:26:5>
>     | |-BinaryOperator 0x400000d3b540 <line:24:10, col:14> 'int' '='
>     | | |-DeclRefExpr 0x400000d3b500 <col:10> 'int' lvalue Var 0x400000d3ae00 'i' 'int'
>     | | `-IntegerLiteral 0x400000d3b520 <col:14> 'int' 0
>     | |-<<<NULL>>>
>     | |-BinaryOperator 0x400000d3b5b8 <col:17, col:21> 'int' '<'
>     | | |-ImplicitCastExpr 0x400000d3b5a0 <col:17> 'int' <LValueToRValue>
>     | | | `-DeclRefExpr 0x400000d3b560 <col:17> 'int' lvalue Var 0x400000d3ae00 'i' 'int'
>     | | `-IntegerLiteral 0x400000d3b580 <col:21> 'int' 3
>     | |-BinaryOperator 0x400000d3b670 <col:24, col:32> 'int' '='
>     | | |-DeclRefExpr 0x400000d3b5d8 <col:24> 'int' lvalue Var 0x400000d3ae00 'i' 'int'
>     | | `-BinaryOperator 0x400000d3b650 <col:28, col:32> 'int' '+'
>     | |   |-ImplicitCastExpr 0x400000d3b638 <col:28> 'int' <LValueToRValue>
>     | |   | `-DeclRefExpr 0x400000d3b5f8 <col:28> 'int' lvalue Var 0x400000d3ae00 'i' 'int'
>     | |   `-IntegerLiteral 0x400000d3b618 <col:32> 'int' 1
>     | `-CompoundStmt 0x400000d3b760 <col:35, line:26:5>
>     |   `-BinaryOperator 0x400000d3b740 <line:25:9, col:27> 'int' '='
>     |     |-DeclRefExpr 0x400000d3b690 <col:9> 'int' lvalue Var 0x400000d3af30 'result' 'int'
>     |     `-BinaryOperator 0x400000d3b720 <col:18, col:27> 'int' '+'
>     |       |-ImplicitCastExpr 0x400000d3b6f0 <col:18> 'int' <LValueToRValue>
>     |       | `-DeclRefExpr 0x400000d3b6b0 <col:18> 'int' lvalue Var 0x400000d3af30 'result' 'int'
>     |       `-ImplicitCastExpr 0x400000d3b708 <col:27> 'int' <LValueToRValue>
>     |         `-DeclRefExpr 0x400000d3b6d0 <col:27> 'int' lvalue Var 0x400000d3ae00 'i' 'int'
>     `-ReturnStmt 0x400000d3b7e8 <line:28:5, col:12>
>       `-ImplicitCastExpr 0x400000d3b7d0 <col:12> 'int' <LValueToRValue>
>         `-DeclRefExpr 0x400000d3b7b0 <col:12> 'int' lvalue Var 0x400000d3af30 'result' 'int'
